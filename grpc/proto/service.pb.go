// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Credentials
	LeaderRequest
	LeaderResponse
	QueryRequest
	QueryRow
	QueryResult
	QueryResponse
	ExecRequest
	ExecResult
	ExecResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryRequest_ReadConsistency int32

const (
	QueryRequest_NONE   QueryRequest_ReadConsistency = 0
	QueryRequest_WEAK   QueryRequest_ReadConsistency = 1
	QueryRequest_STRONG QueryRequest_ReadConsistency = 2
)

var QueryRequest_ReadConsistency_name = map[int32]string{
	0: "NONE",
	1: "WEAK",
	2: "STRONG",
}
var QueryRequest_ReadConsistency_value = map[string]int32{
	"NONE":   0,
	"WEAK":   1,
	"STRONG": 2,
}

func (x QueryRequest_ReadConsistency) String() string {
	return proto1.EnumName(QueryRequest_ReadConsistency_name, int32(x))
}
func (QueryRequest_ReadConsistency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

// Credentials
type Credentials struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto1.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LeaderRequest struct {
}

func (m *LeaderRequest) Reset()                    { *m = LeaderRequest{} }
func (m *LeaderRequest) String() string            { return proto1.CompactTextString(m) }
func (*LeaderRequest) ProtoMessage()               {}
func (*LeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The leader request response
type LeaderResponse struct {
	Leader string `protobuf:"bytes,1,opt,name=leader" json:"leader,omitempty"`
}

func (m *LeaderResponse) Reset()                    { *m = LeaderResponse{} }
func (m *LeaderResponse) String() string            { return proto1.CompactTextString(m) }
func (*LeaderResponse) ProtoMessage()               {}
func (*LeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LeaderResponse) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

// The query statement
type QueryRequest struct {
	Stmt            []string                     `protobuf:"bytes,1,rep,name=stmt" json:"stmt,omitempty"`
	Tx              bool                         `protobuf:"varint,2,opt,name=tx" json:"tx,omitempty"`
	ReadConsistency QueryRequest_ReadConsistency `protobuf:"varint,3,opt,name=read_consistency,json=readConsistency,enum=proto.QueryRequest_ReadConsistency" json:"read_consistency,omitempty"`
	Credentials     *Credentials                 `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryRequest) GetStmt() []string {
	if m != nil {
		return m.Stmt
	}
	return nil
}

func (m *QueryRequest) GetTx() bool {
	if m != nil {
		return m.Tx
	}
	return false
}

func (m *QueryRequest) GetReadConsistency() QueryRequest_ReadConsistency {
	if m != nil {
		return m.ReadConsistency
	}
	return QueryRequest_NONE
}

func (m *QueryRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// The query row
type QueryRow struct {
	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *QueryRow) Reset()                    { *m = QueryRow{} }
func (m *QueryRow) String() string            { return proto1.CompactTextString(m) }
func (*QueryRow) ProtoMessage()               {}
func (*QueryRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryRow) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

// The query result
type QueryResult struct {
	Columns []string    `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Types   []string    `protobuf:"bytes,2,rep,name=types" json:"types,omitempty"`
	Rows    []*QueryRow `protobuf:"bytes,3,rep,name=rows" json:"rows,omitempty"`
	Time    float32     `protobuf:"fixed32,4,opt,name=time" json:"time,omitempty"`
	Error   string      `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto1.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryResult) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *QueryResult) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *QueryResult) GetRows() []*QueryRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *QueryResult) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *QueryResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// The query response
type QueryResponse struct {
	Results []*QueryResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Time    float32        `protobuf:"fixed32,2,opt,name=time" json:"time,omitempty"`
	Error   string         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto1.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *QueryResponse) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *QueryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// The exec statement
type ExecRequest struct {
	Stmt        []string     `protobuf:"bytes,1,rep,name=stmt" json:"stmt,omitempty"`
	Tx          bool         `protobuf:"varint,2,opt,name=tx" json:"tx,omitempty"`
	Credentials *Credentials `protobuf:"bytes,3,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecRequest) GetStmt() []string {
	if m != nil {
		return m.Stmt
	}
	return nil
}

func (m *ExecRequest) GetTx() bool {
	if m != nil {
		return m.Tx
	}
	return false
}

func (m *ExecRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// The exec result
type ExecResult struct {
	LastInsertId int64   `protobuf:"varint,1,opt,name=last_insert_id,json=lastInsertId" json:"last_insert_id,omitempty"`
	RowsAffected int64   `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
	Time         float32 `protobuf:"fixed32,3,opt,name=time" json:"time,omitempty"`
	Error        string  `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *ExecResult) Reset()                    { *m = ExecResult{} }
func (m *ExecResult) String() string            { return proto1.CompactTextString(m) }
func (*ExecResult) ProtoMessage()               {}
func (*ExecResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ExecResult) GetLastInsertId() int64 {
	if m != nil {
		return m.LastInsertId
	}
	return 0
}

func (m *ExecResult) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func (m *ExecResult) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ExecResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// The exec response
type ExecResponse struct {
	Results []*ExecResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Time    float32       `protobuf:"fixed32,2,opt,name=time" json:"time,omitempty"`
	Error   string        `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *ExecResponse) Reset()                    { *m = ExecResponse{} }
func (m *ExecResponse) String() string            { return proto1.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()               {}
func (*ExecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ExecResponse) GetResults() []*ExecResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ExecResponse) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ExecResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto1.RegisterType((*Credentials)(nil), "proto.Credentials")
	proto1.RegisterType((*LeaderRequest)(nil), "proto.LeaderRequest")
	proto1.RegisterType((*LeaderResponse)(nil), "proto.LeaderResponse")
	proto1.RegisterType((*QueryRequest)(nil), "proto.QueryRequest")
	proto1.RegisterType((*QueryRow)(nil), "proto.QueryRow")
	proto1.RegisterType((*QueryResult)(nil), "proto.QueryResult")
	proto1.RegisterType((*QueryResponse)(nil), "proto.QueryResponse")
	proto1.RegisterType((*ExecRequest)(nil), "proto.ExecRequest")
	proto1.RegisterType((*ExecResult)(nil), "proto.ExecResult")
	proto1.RegisterType((*ExecResponse)(nil), "proto.ExecResponse")
	proto1.RegisterEnum("proto.QueryRequest_ReadConsistency", QueryRequest_ReadConsistency_name, QueryRequest_ReadConsistency_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rqlite service

type RqliteClient interface {
	// Query executes a statement that reads data.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Exec executes a statement that writes data.
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	// Leader returns the current leader.
	Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
}

type rqliteClient struct {
	cc *grpc.ClientConn
}

func NewRqliteClient(cc *grpc.ClientConn) RqliteClient {
	return &rqliteClient{cc}
}

func (c *rqliteClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/proto.Rqlite/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqliteClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := grpc.Invoke(ctx, "/proto.Rqlite/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqliteClient) Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := grpc.Invoke(ctx, "/proto.Rqlite/Leader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rqlite service

type RqliteServer interface {
	// Query executes a statement that reads data.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Exec executes a statement that writes data.
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	// Leader returns the current leader.
	Leader(context.Context, *LeaderRequest) (*LeaderResponse, error)
}

func RegisterRqliteServer(s *grpc.Server, srv RqliteServer) {
	s.RegisterService(&_Rqlite_serviceDesc, srv)
}

func _Rqlite_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqliteServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rqlite/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqliteServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rqlite_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqliteServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rqlite/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqliteServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rqlite_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqliteServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rqlite/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqliteServer).Leader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rqlite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rqlite",
	HandlerType: (*RqliteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Rqlite_Query_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Rqlite_Exec_Handler,
		},
		{
			MethodName: "Leader",
			Handler:    _Rqlite_Leader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto1.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6b, 0xdb, 0x4e,
	0x10, 0x8d, 0xfe, 0xd8, 0x71, 0x46, 0xfe, 0xf7, 0x9b, 0xe4, 0x57, 0x84, 0x4f, 0x46, 0xee, 0x41,
	0xd0, 0x62, 0x88, 0x1b, 0xe8, 0x39, 0x04, 0x53, 0x42, 0x8b, 0x43, 0xb7, 0x85, 0x1e, 0x8d, 0x2a,
	0x4d, 0x8a, 0x40, 0x96, 0x9c, 0xdd, 0x55, 0x6c, 0x1f, 0x7b, 0xef, 0x27, 0xe9, 0x57, 0xeb, 0x97,
	0x28, 0xda, 0x95, 0x6c, 0x4b, 0xf8, 0xd0, 0xf6, 0xa4, 0x9d, 0xb7, 0x3b, 0x33, 0xef, 0xbd, 0xd9,
	0x15, 0xf4, 0x04, 0xf1, 0xe7, 0x38, 0xa4, 0xe9, 0x9a, 0x67, 0x32, 0xc3, 0x96, 0xfa, 0x78, 0x73,
	0x70, 0xee, 0x38, 0x45, 0x94, 0xca, 0x38, 0x48, 0x04, 0x8e, 0xa0, 0x93, 0x0b, 0xe2, 0x69, 0xb0,
	0x22, 0xd7, 0x18, 0x1b, 0xfe, 0x05, 0xdb, 0xc7, 0xc5, 0xde, 0x3a, 0x10, 0x62, 0x93, 0xf1, 0xc8,
	0x35, 0xf5, 0x5e, 0x15, 0x7b, 0x03, 0xe8, 0x7d, 0xa0, 0x20, 0x22, 0xce, 0xe8, 0x29, 0x27, 0x21,
	0x3d, 0x1f, 0xfa, 0x15, 0x20, 0xd6, 0x59, 0x2a, 0x08, 0x5f, 0x40, 0x3b, 0x51, 0x48, 0x59, 0xb8,
	0x8c, 0xbc, 0x5f, 0x06, 0x74, 0x3f, 0xe6, 0xc4, 0x77, 0x65, 0x2a, 0x22, 0xd8, 0x42, 0xae, 0xa4,
	0x6b, 0x8c, 0x2d, 0xff, 0x82, 0xa9, 0x35, 0xf6, 0xc1, 0x94, 0x5b, 0xd5, 0xb5, 0xc3, 0x4c, 0xb9,
	0xc5, 0x05, 0x0c, 0x39, 0x05, 0xd1, 0x32, 0xcc, 0x52, 0x11, 0x0b, 0x49, 0x69, 0xb8, 0x73, 0xad,
	0xb1, 0xe1, 0xf7, 0x67, 0x13, 0xad, 0x6f, 0x7a, 0x5c, 0x72, 0xca, 0x28, 0x88, 0xee, 0x0e, 0x47,
	0xd9, 0x80, 0xd7, 0x01, 0xbc, 0x01, 0x27, 0x3c, 0xd8, 0xe0, 0xda, 0x63, 0xc3, 0x77, 0x66, 0x58,
	0x96, 0x3a, 0x32, 0x88, 0x1d, 0x1f, 0xf3, 0xae, 0x61, 0xd0, 0xa8, 0x8c, 0x1d, 0xb0, 0x17, 0x0f,
	0x8b, 0xf9, 0xf0, 0xac, 0x58, 0x7d, 0x99, 0xdf, 0xbe, 0x1f, 0x1a, 0x08, 0xd0, 0xfe, 0xf4, 0x99,
	0x3d, 0x2c, 0xde, 0x0d, 0x4d, 0xcf, 0x83, 0x8e, 0x66, 0x96, 0x6d, 0x0a, 0x47, 0x9e, 0x83, 0x24,
	0x27, 0xa1, 0xa4, 0x76, 0x59, 0x19, 0x79, 0x3f, 0x0c, 0x70, 0x4a, 0xfa, 0x22, 0x4f, 0x24, 0xba,
	0x70, 0x1e, 0x66, 0x49, 0xbe, 0x4a, 0x45, 0xe9, 0x49, 0x15, 0xe2, 0x15, 0xb4, 0xe4, 0x6e, 0x4d,
	0xc2, 0x35, 0x15, 0xae, 0x03, 0x9c, 0x80, 0xcd, 0xb3, 0x8d, 0x70, 0xad, 0xb1, 0xe5, 0x3b, 0xb3,
	0x41, 0xcd, 0x90, 0x6c, 0xc3, 0xd4, 0x66, 0xe1, 0xb2, 0x8c, 0x57, 0xa4, 0xa4, 0x9a, 0x4c, 0xad,
	0x8b, 0x72, 0xc4, 0x79, 0xc6, 0xdd, 0x96, 0x9a, 0x90, 0x0e, 0xbc, 0x6f, 0xd0, 0xab, 0xd8, 0xe8,
	0x49, 0xbe, 0x86, 0x73, 0xae, 0x98, 0x69, 0x3e, 0x07, 0xa3, 0x8e, 0x48, 0xb3, 0xea, 0xc8, 0xbe,
	0x91, 0x79, 0xaa, 0x91, 0x55, 0x6f, 0xe4, 0xcc, 0xb7, 0x14, 0xfe, 0xcd, 0x3d, 0x68, 0xcc, 0xcd,
	0xfa, 0xb3, 0xb9, 0x7d, 0x37, 0x00, 0x74, 0x27, 0xe5, 0xef, 0x4b, 0xe8, 0x27, 0x81, 0x90, 0xcb,
	0x38, 0x15, 0xc4, 0xe5, 0x32, 0x8e, 0xd4, 0x0d, 0xb5, 0x58, 0xb7, 0x40, 0xef, 0x15, 0x78, 0x1f,
	0xe1, 0x04, 0x7a, 0x85, 0x71, 0xcb, 0xe0, 0xf1, 0x91, 0x42, 0x49, 0xfa, 0x0d, 0x58, 0xac, 0x5b,
	0x80, 0xb7, 0x25, 0xb6, 0x17, 0x6b, 0x9d, 0x12, 0x6b, 0x1f, 0x8b, 0x25, 0xe8, 0x96, 0x14, 0xb4,
	0xa9, 0xaf, 0x9a, 0xa6, 0xfe, 0x57, 0xaa, 0x38, 0x10, 0xfd, 0x07, 0x4f, 0x67, 0x3f, 0x0d, 0x68,
	0xb3, 0xa7, 0x24, 0x96, 0x84, 0x37, 0xd0, 0x52, 0x03, 0xc2, 0xcb, 0x13, 0x4f, 0x64, 0x74, 0xd5,
	0x98, 0xa1, 0x62, 0xe5, 0x9d, 0xe1, 0x35, 0xd8, 0x05, 0x03, 0xc4, 0x1a, 0x1d, 0x9d, 0x73, 0x59,
	0xa7, 0x58, 0xa5, 0xbc, 0x85, 0xb6, 0x7e, 0xfb, 0x58, 0x15, 0xad, 0xfd, 0x1b, 0x46, 0xff, 0x37,
	0xd0, 0x2a, 0xf1, 0x6b, 0x5b, 0xe1, 0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x95, 0x9d, 0xab,
	0x63, 0xab, 0x04, 0x00, 0x00,
}
